mkdir scala-assignment
:quit
def bubbleSort(arr: Array[Int]): Array[Int] = {
  for (i <- 0 until arr.length) {
    for (j <- 0 until arr.length - i - 1) {
      if (arr(j) > arr(j + 1)) {
        val temp = arr(j)
        arr(j) = arr(j + 1)
        arr(j + 1) = temp
      }
    }
  }
  arr
}
val arr = Array(5, 1, 4, 2, 8)
println("Original array: " + arr.mkString(", "))
val sortedArr = bubbleSort(arr)
println("Sorted array: " + sortedArr.mkString(", "))
def bubbleSort(arr: Array[Int], ascending: Boolean): Array[Int] = {
  for (i <- 0 until arr.length) {
    for (j <- 0 until arr.length - i - 1) {
      if ((ascending && arr(j) > arr(j + 1)) || (!ascending && arr(j) < arr(j + 1))) {
        val temp = arr(j)
        arr(j) = arr(j + 1)
        arr(j + 1) = temp
      }
    }
  }
  arr
}
val arr = Array(5 , 2 , 3 , 1 )
val sortedArrAsc = bubbleSort(arr, ascending = true)
println("Sorted in Ascending Order: " + sortedArrAsc.mkString(", "))
:quit
println("hello")
def bubbleSort(arr: Array[Int], ascending: Boolean): Array[Int] = {
  for (i <- 0 until arr.length) {
    for (j <- 0 until arr.length - i - 1) {
      if ((ascending && arr(j) > arr(j + 1)) || (!ascending && arr(j) < arr(j + 1))) {
        val temp = arr(j)
        arr(j) = arr(j + 1)
        arr(j + 1) = temp
      }
    }
  }
  arr
}
val arr = Array(5, 1, 4, 2, 8)
val sortedArrAsc = bubbleSort(arr, ascending = true)
println("Sorted in Ascending Order: " + sortedArrAsc.mkString(", "))
:quit
